local gx = require "graphx"

describe("Graph", function ()
            it("Graph()", function ()
                  local G = gx.Graph({author="E-Neo"})
                  assert.are.equal("E-Neo", G.graph.author)
                  assert.are.equal("", G.graph.name)
            end)

            it("name", function ()
                  local G = gx.Graph()
                  G:name("Test Graph")
                  assert.are.equal("Test Graph", G:name())
                  assert.are.equal("Test Graph", tostring(G))
            end)

            it("add_node", function ()
                  local G = gx.Graph()
                  G:add_node("a")
                  assert.are.same({a={}}, G.node)
                  assert.are.same({a={}}, G.adj)
                  G:add_node(1, {color="red"})
                  assert.are.equal("red", G.node[1]["color"])
                  G:add_node(1, {color="green"})
                  assert.are.equal("green", G.node[1]["color"])
            end)

            it("add_nodes_from", function ()
                  local G = gx.Graph()
                  G:add_nodes_from({"a", "b"})
                  assert.are.same({a={}, b={}}, G.node)
                  assert.are.same({a={}, b={}}, G.adj)
                  G:add_nodes_from({"c", "d"}, false, {color="red"})
                  assert.are.equal("red", G.node["c"]["color"], G.node["d"]["color"])
                  G:add_nodes_from({{"c", {color="green"}}, {"e"}}, true, {color="blue"})
                  assert.are.equal("green", G.node["c"]["color"])
                  assert.are.equal("blue", G.node["e"]["color"])
                  G:add_nodes_from({"c"}, false, {color="yellow"})
                  assert.are.equal("yellow", G.node["c"]["color"])
            end)

            it("remove_node", function ()
                  local G = gx.Graph()
                  assert.has_error(function () G:remove_node(1) end,
                     "The node 1 is not in the digraph.")
                  G:add_edges_from({{1, 2}, {2, 3}})
                  G:remove_node(2)
                  assert.are.same({{}, nil, {}}, G.node)
                  assert.are.same({{}, nil, {}}, G.adj)
            end)

            it("remove_nodes_from", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 3}})
                  G:remove_nodes_from({1, 2, 3, 4})
                  assert.are.same({}, G.node)
                  assert.are.same({}, G.adj)
            end)

            it("nodes", function ()
                  local G = gx.Graph()
                  G:add_nodes_from({{1, {color="red"}}}, true)
                  assert.are.same({1}, G:nodes())
                  assert.are.same({{1, {color="red"}}}, G:nodes(true))
                  assert.are.equal(100, G:nodes(true, "size", 100)[1][2])
            end)

            it("number_of_nodes", function ()
                  local G = gx.Graph()
                  G:add_nodes_from({1, 2, 3, 4, 5, 6})
                  assert.are.equal(6, G:number_of_nodes())
                  assert.are.equal(6, G:order())
            end)

            it("has_node", function ()
                  local G = gx.Graph()
                  G:add_node(1)
                  assert.is_true(G:has_node(1))
                  assert.is_false(G:has_node(2))
            end)

            it("add_edge", function ()
                  local G = gx.Graph()
                  G:add_edge(print, tostring)
                  local expected_node = {}
                  expected_node[print] = {}
                  expected_node[tostring] = {}
                  local expected_adj = {}
                  expected_adj[print] = {}
                  expected_adj[print][tostring] = {}
                  expected_adj[tostring] = {}
                  expected_adj[tostring][print] = {}
                  assert.are.same(expected_node, G.node)
                  assert.are.same(expected_adj, G.adj)
                  G:add_edge(tostring, print, {weight = 10})
                  assert.are.equal(G.adj[print][tostring], G.adj[tostring][print])
                  assert.are.equal(10, G.adj[print][tostring]["weight"])
            end)

            it("add_edges_from", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 3}})
                  local expected_node = {{}, {}, {}}
                  local expected_adj = {{nil, {}}, {{}, nil, {}}, {nil, {}}}
                  assert.are.same(expected_node, G.node)
                  assert.are.same(expected_adj, G.adj)
                  G:add_edges_from({{1, 2, {weight = 0.2}}, {3, 1}}, {weight = 0.5})
                  assert.are.equal(0.2, G.adj[1][2]["weight"])
                  assert.are.equal(0.5, G.adj[1][3]["weight"])
                  assert.are.equal(G.adj[2][1], G.adj[1][2])
                  assert.are.equal(G.adj[1][3], G.adj[3][1])
            end)

            it("add_weighted_edges_from", function ()
                  local G = gx.Graph()
                  G:add_weighted_edges_from({{1, 2, 0.2}, {2, 3}})
                  assert.are.equal(0.2, G.adj[1][2]["weight"])
                  assert.are.equal(nil, G.adj[2][3]["weight"])
                  G:add_weighted_edges_from({{1, 2, "red"}, {3, 1}}, "color", {size = 10})
                  assert.are.equal("red", G.adj[1][2]["color"])
                  assert.are.equal(10, G.adj[1][2]["size"])
                  assert.are.equal(10, G.adj[1][3]["size"])
            end)

            it("remove_edge", function ()
                  local G = gx.Graph()
                  assert.has_error(function () G:remove_edge(1, 2) end,
                     "The edge 1-2 is not in the graph.")
                  G:add_edge(true, false)
                  G:remove_edge(true, false)
                  assert.are.same({}, G.adj[true])
                  assert.are.same({}, G.adj[false])
                  G:add_edge(1, 1)
                  G:remove_edge(1, 1)
                  assert.are.same({}, G.adj[1])
            end)

            it("remove_edges_from", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 3}})
                  G:remove_edges_from({{1, 2}, {2, 1}})
                  assert.are.same({{}, {nil, nil, {}}, {nil, {}}}, G.adj)
            end)

            it("has_edge", function ()
                  local G = gx.Graph()
                  G:add_edge(1, 2)
                  assert.is_true(G:has_edge(2, 1))
                  assert.is_false(G:has_edge(3, 4))
            end)

            it("neighbors", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 3}})
                  assert.has_error(function () G:neighbors(4) end,
                                   "The node 4 is not in the digraph.")
                  assert.are.same({nil, {}}, G:neighbors(1))
            end)

            it("edges", function ()
                  local G = gx.Graph()
                  G:add_edge(1, 2, {weight = 10, length = 9})
                  local edges = G:edges()
                  assert.are.equal(1, #edges)
                  assert.is_true((edges[1][1] == 1 and edges[1][2] == 2) or
                        (edges[1][1] == 2 and edges[1][2] == 1))
                  edges = G:edges(nil, true)
                  assert.are.equal(1, #edges)
                  assert.is_true((edges[1][1] == 1 and edges[1][2] == 2) or
                        (edges[1][1] == 2 and edges[1][2] == 1))
                  assert.are.same({weight = 10, length = 9}, edges[1][3])
                  edges = G:edges(nil, true, "length")
                  assert.are.equal(1, #edges)
                  assert.is_true((edges[1][1] == 1 and edges[1][2] == 2) or
                        (edges[1][1] == 2 and edges[1][2] == 1))
                  assert.are.equal(9, edges[1][3])
                  G:add_edge(3, 4)
                  edges = G:edges({3, 4, 5}, true, "color", "red")
                  assert.are.equal(1, #edges)
                  assert.is_true((edges[1][1] == 3 and edges[1][2] == 4) or
                        (edges[1][1] == 4 and edges[1][2] == 3))
                  assert.are.equal("red", edges[1][3])
            end)

            it("get_edge_data", function ()
                  local G = gx.Graph()
                  G:add_edge(1, 2, {weight = 10})
                  assert.are.equal(G.adj[1][2], G:get_edge_data(1, 2))
                  assert.are.equal("default", G:get_edge_data(3, 4, "default"))
            end)

            it("adjacency", function ()
                  local G = gx.Graph()
                  assert.are.equal(G.adj, G:adjacency())
            end)

            it("degree", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2, {weight=2}}, {2, 3, {weight=3}}})
                  assert.are.equal(2, G:degree(2))
                  assert.are.equal(5, G:degree(2, "weight"))
                  assert.are.same({{1, 1}, {2, 2}, {3, 1}}, G:degree())
                  assert.are.same({{1, 1}, {2, 2}}, G:degree({1, 2}))
                  assert.are.same({{2, 5}}, G:degree({2}, "weight"))
                  G:add_edge(1, 1, {weight = 7})
                  assert.are.equal(16, G:degree(1, "weight"))
            end)

            it("clear", function ()
                  local G = gx.Graph({name = "TEST"})
                  G:add_edges_from({{1, 2}, {2, 3}})
                  G:clear()
                  assert.are.same({}, G.node)
                  assert.are.same({}, G.adj)
                  assert.are.equal("", G:name())
            end)

            it("copy", function ()
                  local G = gx.Graph()
                  G:add_edge(1, 2)
                  local H = G:copy()
                  G:remove_edge(1, 2)
                  assert.is_true(H:has_edge(1, 2))
                  H:add_edge(3, 4)
                  assert.is_false(G:has_edge(3, 4))
            end)

            it("is_multigraph is_directed", function ()
                  local G = gx.Graph()
                  assert.is_false(G:is_multigraph())
                  assert.is_false(G:is_directed())
            end)

            it("to_directed", function ()
                  local G = gx.Graph()
                  local H = G:to_directed()
                  assert.is_true(H:is_directed())
            end)

            it("to_undirected", function ()
                  local G = gx.Graph({name="TEST"})
                  G:add_edges_from({{1, 2}, {"b", "c"}})
                  local H = G:to_undirected()
                  assert.are.same(H.adj, G.adj)
                  assert.are.same(H.node, G.node)
                  assert.are.same(H.graph, G.graph)
            end)

            it("subgraph", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 3}, {3, 4}, {4, 1}})
                  local H = gx.Graph()
                  H:add_edges_from({{2, 3}, {3, 4}})
                  assert.are.same(H, G:subgraph({2, 3, 4}))
            end)

            it("edge_subgraph", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 3}, {3, 4}, {4, 1}})
                  local H = gx.Graph()
                  H:add_edges_from({{2, 3}, {3, 4}})
                  assert.are.same(H, G:edge_subgraph({{2, 3}, {3, 4}, {4, 5}}))
            end)

            it("nodes_with_selfloops", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {1, 1}, {2, 2}})
                  assert.are.same({1, 2}, G:nodes_with_selfloops())
            end)

            it("selfloop_edges", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {1, 1, {weight = 10, color = "red"}}, {2, 3}})
                  assert.are.same({{1, 1}}, G:selfloop_edges())
                  assert.are.same({{1, 1, {weight = 10, color = "red"}}},
                     G:selfloop_edges(true))
                  assert.are.same({{1, 1, 10}}, G:selfloop_edges(true, "weight"))
                  assert.are.same({{1, 1, 7}}, G:selfloop_edges(true, "size", 7))
            end)

            it("number_of_selfloops", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {1, 1}, {2, 2}})
                  assert.are.equal(2, G:number_of_selfloops())
            end)

            it("size", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 1, {weight = 2}}, {1, 2, {weight = 3}}})
                  assert.are.equal(2, G:size())
                  assert.are.equal(5, G:size("weight"))
            end)

            it("number_of_edges", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 1}, {1, 2}, {2, 3}})
                  assert.are.equal(3, G:number_of_edges())
                  assert.are.equal(1, G:number_of_edges(1, 2))
                  assert.are.equal(0, G:number_of_edges(4, 2))
            end)
end)
