local gx = require "graphx"

describe("depth_first_search", function ()
            it("dfs_edges", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 4}, {1, 5}})
                  assert.are.same({{1, 2}, {2, 4}, {1, 5}}, gx.dfs_edges(G, 1))
                  G:clear()
                  G:add_edges_from({{1, 2}, {3, 4}})
                  assert.are.same({{1, 2}, {3, 4}}, gx.dfs_edges(G))
            end)

            it("dfs_tree", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 3}, {1, 3}})
                  G:add_node(4)
                  local T = gx.DiGraph()
                  T:add_edges_from({{1, 2}, {2, 3}})
                  T:add_node(4)
                  assert.are.same(T, gx.dfs_tree(G))
                  T:clear()
                  T:add_edges_from({{1, 2}}, gx.dfs_tree(G, 1))
            end)

            it("dfs_predecessors dfs_successors", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 3}, {3, 1}})
                  assert.are.same({nil, 1, 2}, gx.dfs_predecessors(G, 1))
                  assert.are.same({{2}, {3}}, gx.dfs_successors(G, 1))
            end)

            it("dfs_preorder_nodes dfs_postorder_nodes", function ()
                  local G = gx.Graph()
                  G:add_edges_from({{1, 2}, {2, 3}, {1, 3}})
                  assert.are.same({1, 2, 3}, gx.dfs_preorder_nodes(G, 1))
                  assert.are.same({3, 2, 1}, gx.dfs_postorder_nodes(G, 1))
            end)
end)
